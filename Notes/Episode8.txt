1.Class based component-
its a normal javascript class . It is a class which extends React.Component and have render() which return jsx .

React.Component is a class which is given by react.

import React from "react";

class UserClass extends React.Component{
    render(){
        return (
            //jsx code
        )
    }
}

2. export import and adding class based component is same as functional component .

3. Props in class based component - - it uses constructor where we get the props and user super(props)
and always use this keyword .


import User from "./User";
import UserClass from "./UserClass";
const About = () => {
  return (
    <div>
      <h1>About</h1>
      <h2>This is nameste reactweb series</h2>
      <User name={"Nupur Gupta (functional based)"} location={"Jaipur"} />

      <UserClass name={"Nupur Gupta (Class Based)"} />
    </div>
  );
};

export default About;

import React from "react";
class UserClass extends React.Component {
  constructor(props) {
    super(props);
  }
  render() {
    return (
      <div className="user-card">
        <h2>Name : {this.props.name}</h2>
        <h3>Location : Jaipur</h3>
        <h4>Contact : @nupurgupta</h4>
      </div>
    );
  }
}

export default UserClass;


Destruct props - 
-----------------

import React from "react";
class UserClass extends React.Component {
  constructor(props) {
    super(props);
  }
  render() {
    const { name } = this.props; // Destruct
    return (
      <div className="user-card">
        <h2>Name : {name}</h2>
        <h3>Location : Jaipur</h3>
        <h4>Contact : @nupurgupta</h4>
      </div>
    );
  }
}

export default UserClass;

4 . How to create state variable inside class based component - no importing of hooks

import React from "react";
class UserClass extends React.Component {
  constructor(props) {
    super(props);

    //creating state variable inside class based compenent

    this.state = {
      count: 0,
    };
  }
  render() {
    // Destruct
    const { name } = this.props;
    return (
      <div className="user-card">
        <h2>Count : {this.state.count}</h2>
        <h2>Name : {name}</h2>
        <h3>Location : Jaipur</h3>
        <h4>Contact : @nupurgupta</h4>
      </div>
    );
  }
}

export default UserClass;

Destruct state variable - 
------------------------

import React from "react";
class UserClass extends React.Component {
  constructor(props) {
    super(props);

    //creating state variable inside class based compenent

    this.state = {
      count: 0,
    };
  }
  render() {
    // Destruct
    const { name } = this.props;

    //destruct state variable
    const { count } = this.state;
    return (
      <div className="user-card">
        <h2>Count : {count}</h2>
        <h2>Name : {name}</h2>
        <h3>Location : Jaipur</h3>
        <h4>Contact : @nupurgupta</h4>
      </div>
    );
  }
}

export default UserClass;

5. How to create two state variables in class based compenent -

import React from "react";
class UserClass extends React.Component {
  constructor(props) {
    super(props);

    //creating state variable inside class based compenent

    this.state = {
      count: 0,
      count2: 1,
    };
  }
  render() {
    // Destruct
    const { name } = this.props;

    //destruct state variable
    const { count, count2 } = this.state;
    return (
      <div className="user-card">
        <h2>Count : {count}</h2>
        <h2>Count2 : {count2}</h2>
        <h2>Name : {name}</h2>
        <h3>Location : Jaipur</h3>
        <h4>Contact : @nupurgupta</h4>
      </div>
    );
  }
}

export default UserClass;

6.How to update state variable in class based compenent - using this.setstate({}) - its an object

import React from "react";
class UserClass extends React.Component {
  constructor(props) {
    super(props);

    //creating state variable inside class based compenent

    this.state = {
      count: 0,
      count2: 1,
    };
  }
  render() {
    // Destruct
    const { name } = this.props;

    //destruct state variable
    const { count, count2 } = this.state;
    return (
      <div className="user-card">
        <h2>Count : {count}</h2>
        <button
          onClick={() => {
            //Never update state variables directly
            // this.state.count=this.state.count+1

            this.setState({
              count: this.state.count + 1,
            });
          }}
        >
          Count Increase
        </button>
        <h2>Count2 : {count2}</h2>
        <h2>Name : {name}</h2>
        <h3>Location : Jaipur</h3>
        <h4>Contact : @nupurgupta</h4>
      </div>
    );
  }
}

export default UserClass;

7. Life cycle of class based compenent -
we have one more method given by react is componentDidMount() { } - it is used to make an API call .

Only One class Cycle - 
Parent constructor called
Parent render called
Parent component did mount called


Parent - child life cycle -
Parent constructor called
Parent render called
Child constructor called
Child Render called
Child component did mount called
Parent component did mount called


8. We have one more method given by react is componentDidMount() { } - it is used to make an API call .
Why we made API call in compoenentDidMount() ?  
Once the component is laod it renders the data then it call the API and rerender the compoenet thats why we do api Call 
under compoenentDidMount()

9. Lifecycele in case of two child -
Parent constructor called
Parent render called
Child1 constructor called
Child1 Render called
Child2 constructor called
Child2 Render called
Child1 component did mount called
Child2 component did mount called
Parent component did mount called

10> mouting have two phase render phase - constrctor and render and commit phase - React update dom and compoenentDidMount


9. How to make API call in Class Based Component- 

import React from "react";
class UserClass extends React.Component {
  constructor(props) {
    super(props);

    //creating state variable inside class based compenent

    this.state = {
      userInfo: {
        login: "dummy",
        location: "default",
        updated_at: "dummy",
      },
    };
  }

  async componentDidMount() {
    const data = await fetch("https://api.github.com/users/nup26");
    const json = await data.json();
    console.log(json);

    this.setState({ userInfo: json });
  }

  componentDidUpdate() {
    console.log("component did update called");
  }

  render() {
  
    
    const { login, location, updated_at } = this.state.userInfo;

    return (
        <div>
          <h2>login : {login}</h2>
        <h3>Location :{location}</h3>
        <h3>updated : {updated_at}</h3>
        <h4>Contact : @nupurgupta</h4>
      </div>
    );
  }
}

export default UserClass;

10> lifecyccle -

-----Mounting ------
constrctor (dummy)
render (dummy)
HTML dummy
componentDidMount 
API call 
this.setState() -state variable updated

--------updating ---------
render (API data)
HTML loads with new API  data
compenentDidUpdate
--------unmounting------------
componentWillUnmount() - it is called when the compoenent disappear (when we swtich to new page)


  



